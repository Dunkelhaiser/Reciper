generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    firstName     String?
    lastName      String?
    username      String?   @unique
    email         String?   @unique
    emailVerified Boolean?  @default(false)
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    verificationTokens VerificationToken[]
    recipes       Recipe[]
    votes         Vote[]
    comments      Comment[]
    commentVotes  CommentVote[]
    subscriptions Subscription[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@index([username, email])
}

model VerificationToken {
    id          String   @id @default(cuid())
    token       String   @unique
    activatedAt DateTime?
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Recipe {
    id          String   @id @default(cuid())
    title       String
    description String?
    ingredients String[]
    instructions String[]
    image       String?
    tags        Tag[]
    category    Category? @relation(fields: [categoryId], references: [id])
    categoryId  String?
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    comments    Comment[]
    votes       Vote[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([title, description])
}

model Tag {
    id          String   @id @default(cuid())
    label       String   @unique
    recipes     Recipe[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([label])
}

model Category{
    id          String   @id @default(cuid())
    title       String   @unique
    recipes     Recipe[]
    subscriptions Subscription[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([title])
}

model Comment {
    id          String   @id @default(cuid())
    content     String
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    replyToId   String?
    replyTo     Comment? @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies     Comment[] @relation("ReplyTo")

    votes       CommentVote[]
}

enum VoteType {
    LIKE
    DISLIKE
}

model CommentVote {
    comment     Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId   String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    type        VoteType
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@id([userId, commentId])
}

model Vote{
    recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId    String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    type        VoteType
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@id([userId, recipeId])
}

model Subscription{
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId  String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@id([userId, categoryId])
}